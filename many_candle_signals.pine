// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iFlyTheMoon

//@version=5
library("ManyCandleSignals", overlay=true)

TYPE_NEUTRAL = 0
TYPE_BEARISH = 1
TYPE_BULLISH = 2

export typeNeutral() => TYPE_NEUTRAL
export typeBearish() => TYPE_BEARISH
export typeBullish() => TYPE_BULLISH

validateSignalType(int signalType) =>
	if signalType < 0 or signalType > 2
		runtime.error(str.format("Invalid signal type: {0}", signalType))

export type CandleSignal
	string info
	int    signalType

export isAnyCandleSignal(array<CandleSignal> candle_signals) =>
	na(candle_signals) ? false : array.size(candle_signals) != 0

processCandleSignals(array<CandleSignal> candle_signals) =>
	nNeutral = 0
	nBearish = 0
	nBullish = 0
	neutralInfo = ""
	bearishInfo = ""
	bullishInfo = ""
	if isAnyCandleSignal(candle_signals)
		for i = 0 to array.size(candle_signals) - 1
			signal = array.get(candle_signals, i)
			if signal.signalType == TYPE_NEUTRAL
				neutralInfo += str.format("({0}) {1}\n", nNeutral + 1, signal.info)
				nNeutral += 1
			else if signal.signalType == TYPE_BEARISH
				bearishInfo += str.format("({0}) {1}\n", nBearish + 1, signal.info)
				nBearish += 1
			else if signal.signalType == TYPE_BULLISH
				bullishInfo += str.format("({0}) {1}\n", nBullish + 1, signal.info)
				nBullish += 1
			else
				runtime.error(str.format("Invalid signal type: {0}", signal.signalType))
	[nNeutral, str.trim(neutralInfo), nBearish, str.trim(bearishInfo), nBullish, str.trim(bullishInfo)]

export type CandleSignalsWrap
	array<CandleSignal> candle_signals

export type ManyCandleSignals
	array<CandleSignalsWrap> many_candle_signals

export init() =>
	ManyCandleSignals.new(array.new<CandleSignalsWrap>(bar_index + 1))

export addCandleSignal(ManyCandleSignals this, int nBack, string info, int signalType) =>
	validateSignalType(signalType)
	signal = CandleSignal.new(info, signalType)
	wrap = array.get(this.many_candle_signals, nBack)
	if na(wrap)
		wrap := CandleSignalsWrap.new(array.from(signal))
		array.set(this.many_candle_signals, nBack, wrap)
	else
		array.push(wrap.candle_signals, signal)

export getCandleSignals(ManyCandleSignals this, int nBack) =>
	wrap = array.get(this.many_candle_signals, nBack)
	na(wrap) ? na : wrap.candle_signals

export plotCandleSignals(int nBack, array<CandleSignal> candle_signals) =>
	if isAnyCandleSignal(candle_signals)
		[nNeutral, neutralInfo, nBearish, bearishInfo, nBullish, bullishInfo] = processCandleSignals(candle_signals)

		if nNeutral != 0
			label.new(x=bar_index - nBack,
					  y=na,
					  yloc=yloc.belowbar,
					  text=str.format("{0}", nNeutral),
					  textcolor=color.blue,
					  style=label.style_none,
					  size=size.normal,
					  tooltip=nBullish == 0 ? str.format("[ Neutral ]\n{0}", neutralInfo) : na)

		if nBullish != 0
			label.new(x=bar_index - nBack,
					  y=na,
					  yloc=yloc.belowbar,
					  text=nNeutral == 0 ? str.format("{0}", nBullish) : str.format("\n{0}", nBullish),
					  textcolor=color.green,
					  style=label.style_none,
					  size=size.normal,
					  tooltip=str.trim((nNeutral == 0 ? "" : str.format("[ Neutral ]\n{0}\n\n", neutralInfo)) + (nBullish == 0 ? "" : str.format("[ Bullish ]\n{0}", bullishInfo))))

		if nBearish != 0
			label.new(x=bar_index - nBack,
					  y=na,
					  yloc=yloc.abovebar,
					  text=str.format("{0}", nBearish),
					  textcolor=color.red,
					  style=label.style_none,
					  size=size.normal,
					  tooltip=str.format("[ Bearish ]\n{0}", bearishInfo))

export plotManyCandleSignals(ManyCandleSignals this) =>
	for i = 0 to bar_index
		plotCandleSignals(i, getCandleSignals(this, i))

// if barstate.islastconfirmedhistory
// 	state = init()
// 	addCandleSignal(state, 0, "msg 1", typeBearish())
// 	addCandleSignal(state, 0, "msg 1", typeNeutral())
// 	addCandleSignal(state, 0, "msg 2", typeNeutral())
// 	addCandleSignal(state, 0, "msg 1", typeBullish())
// 	addCandleSignal(state, 0, "msg 2", typeBullish())
// 	plotManyCandleSignals(state)

