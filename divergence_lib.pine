// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iFlyTheMoon

//@version=5

library("DivergenceLib", overlay=true)

import iFlyTheMoon/CandleSignalsLib/1
import iFlyTheMoon/ArrayLib/1

TYPE_BULLISH_DIVERGENCE                  = 0
TYPE_HIDDEN_BULLISH_DIVERGENCE           = 1
TYPE_BEARISH_DIVERGENCE                  = 2
TYPE_HIDDEN_BEARISH_DIVERGENCE           = 3

NAME_BULLISH_DIVERGENCE                  = "Bullish Divergence"
NAME_HIDDEN_BULLISH_DIVERGENCE           = "Hidden Bullish Divergence"
NAME_BEARISH_DIVERGENCE                  = "Bearish Divergence"
NAME_HIDDEN_BEARISH_DIVERGENCE           = "Hidden Bearish Divergence"

DESC_BULLISH_DIVERGENCE                  = ""
DESC_HIDDEN_BULLISH_DIVERGENCE           = ""
DESC_BEARISH_DIVERGENCE                  = ""
DESC_HIDDEN_BEARISH_DIVERGENCE           = ""

export type_bullish_divergence()        => TYPE_BULLISH_DIVERGENCE
export type_hidden_bullish_divergence() => TYPE_HIDDEN_BULLISH_DIVERGENCE
export type_bearish_divergence()        => TYPE_BEARISH_DIVERGENCE
export type_hidden_bearish_divergence() => TYPE_HIDDEN_BEARISH_DIVERGENCE

export type Divergence
	int   n_back
	float price
	float indicator
	int   n_back_prev
	float price_prev
	float indicator_prev
	bool  is_confirmed
	int   divergence_type

export type DivergenceLibParams
	int   n_left_start
	int   n_left_step
	int   n_left_end
  
	int   n_right_start
	int   n_right_step
  
	int   max_in_between
 
	bool  add_lines
	color line_color_bullish
	color line_color_bearish


export type DivergenceLib
	DivergenceLibParams params
	array<float>        price_low
	array<float>        price_high
	array<float>        indicator

get_pivots_max_count(DivergenceLib id) =>
	id.params.max_in_between > 0 ? 2 + id.params.max_in_between : 2

is_divergence_not_added(array<Divergence> id, Divergence divergence) =>
    result = true

    if array.size(id) != 0
        for i = 0 to array.size(id) - 1
            _divergence = array.get(id, i)

            if _divergence.divergence_type != divergence.divergence_type
                continue

            if _divergence.n_back_prev != divergence.n_back_prev
                continue

            if _divergence.n_back != divergence.n_back
                continue

            result := false
            break

    result

is_bullish_divergence(DivergenceLib id, int n_back_prev, int n_back) =>
	if n_back >= n_back_prev
		runtime.error("Previous n_back compared to n_back must be in the past.")

	result = false

	for _ = 0 to 0
		if array.get(id.price_low, n_back) >= array.get(id.price_low, n_back_prev)
			break

		if array.get(id.indicator, n_back) <= array.get(id.indicator, n_back_prev)
			break
		
		result := true
	
	result

is_hidden_bullish_divergence(DivergenceLib id, int n_back_prev, int n_back) =>
	if n_back >= n_back_prev
		runtime.error("Previous n_back compared to n_back must be in the past.")

	result = false

	for _ = 0 to 0
		if array.get(id.price_low, n_back) <= array.get(id.price_low, n_back_prev)
			break

		if array.get(id.indicator, n_back) >= array.get(id.indicator, n_back_prev)
			break
		
		result := true
	
	result

is_bearish_divergence(DivergenceLib id, int n_back_prev, int n_back) =>
	if n_back >= n_back_prev
		runtime.error("Previous n_back compared to n_back must be in the past.")

	result = false

	for _ = 0 to 0
		if array.get(id.price_high, n_back) <= array.get(id.price_high, n_back_prev)
			break

		if array.get(id.indicator, n_back) >= array.get(id.indicator, n_back_prev)
			break
		
		result := true
	
	result

is_hidden_bearish_divergence(DivergenceLib id, int n_back_prev, int n_back) =>
	if n_back >= n_back_prev
		runtime.error("Previous n_back compared to n_back must be in the past.")

	result = false

	for _ = 0 to 0
		if array.get(id.price_high, n_back) >= array.get(id.price_high, n_back_prev)
			break

		if array.get(id.indicator, n_back) <= array.get(id.indicator, n_back_prev)
			break
		
		result := true
	
	result

get_bullish_divergence(DivergenceLib id, pivots_low, bool would_be_confirmed) =>
	Divergence result = na
	
	for _ = 0 to 0
		if array.size(pivots_low) < 2
			break

		for i = 1 to array.size(pivots_low) - 1
		    n_back = array.get(pivots_low, 0)
		    n_back_prev = array.get(pivots_low, i)

		    if is_bullish_divergence(id, n_back_prev, n_back)
		        result := Divergence.new(n_back=n_back,
				                         price=array.get(id.price_low, n_back),
										 indicator=array.get(id.indicator, n_back),
				                         n_back_prev=n_back_prev,
										 price_prev=array.get(id.price_low, n_back_prev),
										 indicator_prev=array.get(id.indicator, n_back_prev),
										 is_confirmed=would_be_confirmed,
										 divergence_type=TYPE_BULLISH_DIVERGENCE)
				break
	
	result

get_hidden_bullish_divergence(DivergenceLib id, pivots_low, bool would_be_confirmed) =>
	Divergence result = na
	
	for _ = 0 to 0
		if array.size(pivots_low) < 2
			break

		for i = 1 to array.size(pivots_low) - 1
		    n_back = array.get(pivots_low, 0)
		    n_back_prev = array.get(pivots_low, i)

		    if is_hidden_bullish_divergence(id, n_back_prev, n_back)
		        result := Divergence.new(n_back=n_back,
				                         price=array.get(id.price_low, n_back),
										 indicator=array.get(id.indicator, n_back),
				                         n_back_prev=n_back_prev,
										 price_prev=array.get(id.price_low, n_back_prev),
										 indicator_prev=array.get(id.indicator, n_back_prev),
										 is_confirmed=would_be_confirmed,
										 divergence_type=TYPE_HIDDEN_BULLISH_DIVERGENCE)

				break
	
	result

get_bearish_divergence(DivergenceLib id, pivots_high, bool would_be_confirmed) =>
	Divergence result = na
	
	for _ = 0 to 0
		if array.size(pivots_high) < 2
			break

		for i = 1 to array.size(pivots_high) - 1
		    n_back = array.get(pivots_high, 0)
		    n_back_prev = array.get(pivots_high, i)

		    if is_bearish_divergence(id, n_back_prev, n_back)
		        result := Divergence.new(n_back=n_back,
				                         price=array.get(id.price_high, n_back),
										 indicator=array.get(id.indicator, n_back),
				                         n_back_prev=n_back_prev,
										 price_prev=array.get(id.price_high, n_back_prev),
										 indicator_prev=array.get(id.indicator, n_back_prev),
										 is_confirmed=would_be_confirmed,
										 divergence_type=TYPE_BEARISH_DIVERGENCE)
				break
	
	result

get_hidden_bearish_divergence(DivergenceLib id, pivots_high, bool would_be_confirmed) =>
	Divergence result = na
	
	for _ = 0 to 0
		if array.size(pivots_high) < 2
			break

		for i = 1 to array.size(pivots_high) - 1
		    n_back = array.get(pivots_high, 0)
		    n_back_prev = array.get(pivots_high, i)

		    if is_hidden_bearish_divergence(id, n_back_prev, n_back)
		        result := Divergence.new(n_back=n_back,
				                         price=array.get(id.price_high, n_back),
										 indicator=array.get(id.indicator, n_back),
				                         n_back_prev=n_back_prev,
										 price_prev=array.get(id.price_high, n_back_prev),
										 indicator_prev=array.get(id.indicator, n_back_prev),
										 is_confirmed=would_be_confirmed,
										 divergence_type=TYPE_HIDDEN_BEARISH_DIVERGENCE)
				break
	
	result

get_divergences_for_iteration(DivergenceLib id, int n_left, int n_right) =>
	result = array.new<Divergence>(0)

	for _ = 0 to 0
		if array.size(id.price_low) <= n_left + n_right
			break
		
		min_n_back = ArrayLib.find_min_n_back(id.price_low, n_right, n_left, n_right)

		if min_n_back > n_right
			break
		
		pivots_low = ArrayLib.find_pivots_low_n_back(id.price_low, n_left, n_right, get_pivots_max_count(id))
		would_be_confirmed = min_n_back == n_right

		if not would_be_confirmed
			if array.size(pivots_low) == get_pivots_max_count(id)
				array.pop(pivots_low)

			array.insert(pivots_low, 0, min_n_back)

		bullish_divergence = get_bullish_divergence(id, pivots_low, would_be_confirmed)
	
		if not na(bullish_divergence)
			array.push(result, bullish_divergence)

		hidden_bullish_divergence = get_hidden_bullish_divergence(id, pivots_low, would_be_confirmed)

		if not na(hidden_bullish_divergence)
			array.push(result, hidden_bullish_divergence)

	for _ = 0 to 0
		if array.size(id.price_high) <= n_left + n_right
			break

		max_n_back = ArrayLib.find_max_n_back(id.price_high, n_right, n_left, n_right)

		if max_n_back > n_right
			break
		
		pivots_high = ArrayLib.find_pivots_high_n_back(id.price_high, n_left, n_right, get_pivots_max_count(id))
		would_be_confirmed = max_n_back == n_right

		if not would_be_confirmed
			if array.size(pivots_high) == get_pivots_max_count(id)
				array.pop(pivots_high)

			array.insert(pivots_high, 0, max_n_back)

		bearish_divergence = get_bearish_divergence(id, pivots_high, would_be_confirmed)

		if not na(bearish_divergence)
			array.push(result, bearish_divergence)

		hidden_bearish_divergence = get_hidden_bearish_divergence(id, pivots_high, would_be_confirmed)

		if not na(hidden_bearish_divergence)
			array.push(result, hidden_bearish_divergence)

	result

get_divergences(DivergenceLib id) =>
	loop_end = (id.params.n_left_end - id.params.n_left_start) / id.params.n_left_step
	result = array.new<Divergence>(0)

	for i = 0 to loop_end
        result_iteration = get_divergences_for_iteration(id=id,
		                                                 n_left=id.params.n_left_start + id.params.n_left_step * i,
			      	    			                     n_right=id.params.n_right_start + id.params.n_right_step * i)
	    if array.size(result_iteration) == 0
			continue
		
		for j = array.size(result_iteration) - 1 to 0
			if is_divergence_not_added(result, array.get(result_iteration, j))
				continue
			
			array.remove(result_iteration, j)
		
		array.concat(result, result_iteration)
	
	result

export init(DivergenceLibParams params, array<float> price_low, array<float> price_high, array<float> indicator) =>
	divergence_lib = DivergenceLib.new(params=params,
		                               price_low=price_low,
                                       price_high=price_high,
			                           indicator=indicator)
	get_divergences(divergence_lib)

export add_signals(CandleSignalsLib.CandleSignalsLib id, DivergenceLibParams params, array<Divergence> divergences) =>
	if array.size(divergences) != 0
		for i = 0 to array.size(divergences) - 1
			divergence = array.get(divergences, i)

			if not (barstate.islast or divergence.is_confirmed)
				continue

            signal_line = params.add_lines ? line.new(x1=bar_index - divergence.n_back_prev,
                                                      y1=divergence.price_prev,
                                                      x2=bar_index - divergence.n_back,
                                                      y2=divergence.price,
                                                      color=(divergence.divergence_type == TYPE_BULLISH_DIVERGENCE or divergence.divergence_type == TYPE_HIDDEN_BULLISH_DIVERGENCE) ? params.line_color_bullish : params.line_color_bearish,
                                                      style=line.style_solid) : na

			delete_bar_index = barstate.islast ? bar_index : na

			delete_mode = barstate.islast ? (divergence.is_confirmed ? CandleSignalsLib.mode_delete_equal() : CandleSignalsLib.mode_delete_equal_or_greater()) : na

			if divergence.divergence_type == TYPE_BULLISH_DIVERGENCE
                CandleSignalsLib.add_candle_signal(id=id[divergence.n_back],
                                                   unique=str.format("{0}{1}", NAME_BULLISH_DIVERGENCE, divergence.n_back_prev - divergence.n_back),
                                                   name=(divergence.is_confirmed ? "" : "Unconfirmed ") + NAME_BULLISH_DIVERGENCE,
                                                   description=DESC_BULLISH_DIVERGENCE,
                                                   signal_type=CandleSignalsLib.type_bullish(),
                                                   signal_line=signal_line,
                                                   delete_bar_index=delete_bar_index,
                                                   delete_mode=delete_mode)
				continue

			if divergence.divergence_type == TYPE_HIDDEN_BULLISH_DIVERGENCE
                CandleSignalsLib.add_candle_signal(id=id[divergence.n_back],
                                                   unique=str.format("{0}{1}", NAME_HIDDEN_BULLISH_DIVERGENCE, divergence.n_back_prev - divergence.n_back),
                                                   name=(divergence.is_confirmed ? "" : "Unconfirmed ") + NAME_HIDDEN_BULLISH_DIVERGENCE,
                                                   description=DESC_HIDDEN_BULLISH_DIVERGENCE,
                                                   signal_type=CandleSignalsLib.type_bullish(),
                                                   signal_line=signal_line,
                                                   delete_bar_index=delete_bar_index,
                                                   delete_mode=delete_mode)
				continue

			if divergence.divergence_type == TYPE_BEARISH_DIVERGENCE
                CandleSignalsLib.add_candle_signal(id=id[divergence.n_back],
                                                   unique=str.format("{0}{1}", NAME_BEARISH_DIVERGENCE, divergence.n_back_prev - divergence.n_back),
                                                   name=(divergence.is_confirmed ? "" : "Unconfirmed ") + NAME_BEARISH_DIVERGENCE,
                                                   description=DESC_BEARISH_DIVERGENCE,
                                                   signal_type=CandleSignalsLib.type_bearish(),
												   signal_line=signal_line,
                                                   delete_bar_index=delete_bar_index,
                                                   delete_mode=delete_mode)
				continue

			if divergence.divergence_type == TYPE_HIDDEN_BEARISH_DIVERGENCE
                CandleSignalsLib.add_candle_signal(id=id[divergence.n_back],
                                                   unique=str.format("{0}{1}", NAME_HIDDEN_BEARISH_DIVERGENCE, divergence.n_back_prev - divergence.n_back),
                                                   name=(divergence.is_confirmed ? "" : "Unconfirmed ") + NAME_HIDDEN_BEARISH_DIVERGENCE,
                                                   description=DESC_HIDDEN_BEARISH_DIVERGENCE,
                                                   signal_type=CandleSignalsLib.type_bearish(),
                                                   signal_line=signal_line,
                                                   delete_bar_index=delete_bar_index,
                                                   delete_mode=delete_mode)
				continue
			
			runtime.error(str.format("Unexpected divergence type: {0}", divergence.divergence_type))

// MAX_N_BACK = 499

// curr_max_n_back = math.min(bar_index, MAX_N_BACK)

// rsi = ta.rsi(close, 14)

// low_arr = ArrayLib.arrayify(low, curr_max_n_back)
// high_arr = ArrayLib.arrayify(high, curr_max_n_back)
// rsi_arr = ArrayLib.arrayify(rsi, curr_max_n_back)

// candle_signals = CandleSignalsLib.init()

// for i = 0 to curr_max_n_back
// 	CandleSignalsLib.clean(candle_signals[i])

// params = DivergenceLibParams.new(n_left_start=5,
//                                  n_left_step=10,
//                                  n_left_end=25,
//                                  n_right_start=5,
//                                  n_right_step=10,
//                                  max_in_between=-1,
//                                  add_lines=true,
// 								 line_color_bullish=color.new(color.blue, 40),
// 								 line_color_bearish=color.new(color.orange, 40))

// divergences = init(params=params,
//                    price_low=low_arr,
//                    price_high=high_arr,
//                    indicator=rsi_arr)

// add_signals(candle_signals, params, divergences)

// CandleSignalsLib.plot_candle_signals(candle_signals)

// if bar_index > 0
// 	for i = 1 to curr_max_n_back
// 		if (candle_signals[i]).need_rendering
// 			CandleSignalsLib.plot_candle_signals(candle_signals[i])

