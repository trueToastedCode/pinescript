// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iFlyTheMoon

//@version=5

library("CandlePattern", overlay=true)

import iFlyTheMoon/CandleSignals/1
import iFlyTheMoon/MoreCandleInfo/1

TYPE_DOJI_DRAGONFLY   = 0
TYPE_DOJI_LONG_LEGGED = 1
TYPE_DOJI_GRAVESTONE  = 2

NAME_DOJI_DRAGONFLY   = "Dragonfly Doji"
NAME_DOJI_LONG_LEGGED = "Long-legged Doji"
NAME_DOJI_GRAVESTONE  = "Gravestone Doji"

DESC_DOJI_DRAGONFLY   = "Often appears at the bottom of a downtrend and suggests a potential reversal to the upside. It indicates that despite the bearish pressure, buyers were able to push the price back up to the session's opening level, signaling potential strength."
DESC_DOJI_LONG_LEGGED = "Signifies indecision in the market. It suggests a potential reversal or continuation depending on the preceding trend and subsequent price action."
DESC_DOJI_GRAVESTONE  = "Typically occurs at the top of an uptrend and indicates a potential reversal to the downside. It suggests that despite bullish attempts to push the price higher, sellers were able to drive the price back down to the opening level by the close of the session."

export type_doji_dragonfly() => TYPE_DOJI_DRAGONFLY
export type_doji_long_legged() => TYPE_DOJI_LONG_LEGGED
export type_doji_gravestone() => TYPE_DOJI_GRAVESTONE

export type CandlePatternResult
	int type_doji

export type CandlePattern
	CandleSignals.CandleSignals          candle_signals
	array<MoreCandleInfo.MoreCandleInfo> more_candle_info
	CandlePatternResult                  candle_pattern_result

process_doji_signal(CandlePattern id) =>
	for _ = 0 to 0
		more_candle_info = array.first(id.more_candle_info)
		if more_candle_info.abs_body / more_candle_info.spread >= 0.1
			break
		sep_low = low + more_candle_info.spread * (1. / 3)	
	    sep_high = high - more_candle_info.spread * (1. / 3)
		if more_candle_info.body_low > sep_high
			id.candle_pattern_result.type_doji := TYPE_DOJI_DRAGONFLY
			break
		if more_candle_info.body_low >= sep_low and more_candle_info.body_high <= sep_high
			id.candle_pattern_result.type_doji := TYPE_DOJI_LONG_LEGGED
			break
		if more_candle_info.body_high < sep_low
			id.candle_pattern_result.type_doji := TYPE_DOJI_GRAVESTONE
			break

add_doji_signal(CandlePattern id) =>
	if na(id.candle_pattern_result.type_doji)
		na
	else if id.candle_pattern_result.type_doji == TYPE_DOJI_DRAGONFLY
		CandleSignals.addCandleSignal(id.candle_signals, NAME_DOJI_DRAGONFLY, DESC_DOJI_DRAGONFLY, CandleSignals.type_bearish())
	else if id.candle_pattern_result.type_doji == TYPE_DOJI_LONG_LEGGED
		CandleSignals.addCandleSignal(id.candle_signals, NAME_DOJI_LONG_LEGGED, DESC_DOJI_LONG_LEGGED, CandleSignals.type_neutral())
	else if id.candle_pattern_result.type_doji == TYPE_DOJI_GRAVESTONE
		CandleSignals.addCandleSignal(id.candle_signals, NAME_DOJI_GRAVESTONE, DESC_DOJI_GRAVESTONE, CandleSignals.type_bullish())

process_candle_patterns(CandlePattern id) =>
	process_doji_signal(id)

add_candle_signals(CandlePattern id) =>
	add_doji_signal(id)

export init(CandleSignals.CandleSignals candle_signals, array<MoreCandleInfo.MoreCandleInfo> more_candle_info) =>
	candle_pattern = CandlePattern.new(candle_signals=candle_signals,
                                       more_candle_info=more_candle_info,
                                       candle_pattern_result=CandlePatternResult.new(type_doji=na))
	process_candle_patterns(candle_pattern)
	add_candle_signals(candle_pattern)
	candle_pattern.candle_pattern_result

export arrayify(series CandlePatternResult id, int n_back) =>
	result = array.new<CandlePatternResult>(n_back + 1)
	for i = 0 to n_back
		array.set(result, i, id[i])
	result

