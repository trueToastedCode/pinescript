// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iFlyTheMoon

//@version=5
indicator("Divergence Indicator", overlay=true)

visibilityParamsGroupName  = "Visibility"
isShowBullDiv              = input.bool(true, "Bullish divergence", group=visibilityParamsGroupName)
isShowHiddenBullDiv        = input.bool(true, "Hidden bullish divergence", group=visibilityParamsGroupName)
isShowBearDiv              = input.bool(true, "Bear divergence", group=visibilityParamsGroupName)
isShowHiddenBearDiv        = input.bool(true, "Hidden bear divergence", group=visibilityParamsGroupName)

isShowUnconfBullDiv        = input.bool(true, "Unconfirmed bullish divergence", group=visibilityParamsGroupName)
isShowUnconfHiddenBullDiv  = input.bool(true, "Unconfirmed hidden bullish divergence", group=visibilityParamsGroupName)
isShowUnconfBearDiv        = input.bool(true, "Unconfirmed bear divergence", group=visibilityParamsGroupName)
isShowUnconfHiddenBearDiv  = input.bool(true, "Unconfirmed hidden bear divergence", group=visibilityParamsGroupName)

bullDivLineColor           = input.color(color.new(color.blue, 50), "Bullish Divergence Line", group=visibilityParamsGroupName)
hiddenBullDivLineColor     = input.color(color.new(color.blue, 50), "Hidden Bullish Divergence Line", group=visibilityParamsGroupName)
bearDivLineColor           = input.color(color.new(color.orange, 50), "Bearish Divergence Line", group=visibilityParamsGroupName)
hiddenBearDivLineColor     = input.color(color.new(color.orange, 50), "Hidden Bearish Divergence Line", group=visibilityParamsGroupName)

isShowDivLine              = input.bool(true, "Lines", group=visibilityParamsGroupName)
isShowDivLabel             = input.bool(true, "Label", group=visibilityParamsGroupName)

candleParamsGroupName      = "Candle Parameters"
nLeftStart                 = input.int(5, "Candles left start", group=candleParamsGroupName)
nLeftStep                  = input.int(10, "Candles left step", group=candleParamsGroupName)
nLeftEnd                   = input.int(25, "Candles left end", group=candleParamsGroupName)
nRightStart                = input.int(5, "Candles right start", group=candleParamsGroupName)
nRightStep                 = input.int(10, "Candles right step", group=candleParamsGroupName)
maxInBetween               = input.int(0, "Pivots between max", group=candleParamsGroupName)
nMaxBack                   = input.int(-1, "Max backcandles", group=candleParamsGroupName)
nMaxBackIndicator          = input.int(1000, "Indicator max backcandles", group=candleParamsGroupName)

developmentParamsGroupName = "Debugging (Do not change)"
isCalcRSIWithoutTa         = input.bool(true, "Calculate RSI without ta", group=developmentParamsGroupName)

if (nLeftStart + nLeftEnd) % nLeftStep != 0
    runtime.error("Invalid Configuration: Sum of left start and end value must be divisible by left step size.")

if nLeftEnd < nLeftStart
    runtime.error("Invalid Configuration: Left end value must be lesser than left start value.")

// series are not being passed as function arguments anymore, because the
// readings get inconsistent, if accessed within nested function calls
// => maybe pass as string and then get the value using getter method

// when using ta.rsi and then reading old values, the readings are inconsistent,
// if accessed within nested function calls (i know ta.rsi needs to be called every iteration)
// => writing it into an array seems to solve the issue

// (doesn't need to be called every iteration)
rsiArrayWithoutTa(length) =>
    my_bar_index = math.min(bar_index, nMaxBackIndicator)

    result = array.new<float>(my_bar_index + 1)

    if my_bar_index >= length
        cUp = 0.0
        cDown = 0.0
        
        for i = my_bar_index to my_bar_index - length + 1
            closePrev = close[i]
            closeNext = close[i - 1]

            if closeNext > closePrev
                cUp += closeNext - closePrev
            else if closeNext < closePrev
                cDown += closePrev - closeNext
            
        prevSmmaUp = cUp / length
        prevSmmaDown = cDown / length
        rs = prevSmmaUp / prevSmmaDown
        rsi = 100 - (100 / (1 + rs))
        
        array.set(result, my_bar_index - length, rsi)

        if my_bar_index > length
            for i = my_bar_index - length - 1 to 0
                closePrev = close[i + 1]
                closeNext = close[i]
                
                if closeNext > closePrev
                    cUp := closeNext - closePrev
                    cDown := 0
                else if closeNext < closePrev
                    cUp := 0
                    cDown := closePrev - closeNext
                else
                    cUp := 0
                    cDown := 0

                currSmmaUp = (cUp + (prevSmmaUp * (length - 1))) / length
                currSmmaDown = (cDown + (prevSmmaDown * (length - 1))) / length

                rs := currSmmaUp / currSmmaDown
                rsi := 100 - (100 / (1 + rs))

                array.set(result, i, rsi)

                prevSmmaUp := currSmmaUp
                prevSmmaDown := currSmmaDown
    
    result

rsiArrayWithTa(length) =>
    my_bar_index = math.min(bar_index, nMaxBackIndicator)
    
    result = array.new<float>(my_bar_index + 1)
    rsi = ta.rsi(close, 14)

    for i = 0 to my_bar_index
        array.set(result, i, rsi[i])
    
    result

atrArray(length) =>
    my_bar_index = math.min(bar_index, nMaxBackIndicator)
    
    result = array.new<float>(my_bar_index + 1)
    atr = ta.atr(14)

    for i = 0 to my_bar_index
        array.set(result, i, atr[i])
    
    result

// indicator needs to be an array, because as series the readings are inconsistent
indicator = isCalcRSIWithoutTa ? rsiArrayWithoutTa(14) : rsiArrayWithTa(14)
atr       = atrArray(14)

getLowMinNBack(nBack, nLeft, nRight) =>
    // Boundary checks to ensure valid input parameters
    if nBack < nRight
        runtime.error("The test index (nBack) must be greater than or equal to the number of elements to consider to the right (nRight).")
    
    if nBack > bar_index - nLeft
        runtime.error("The test index (nBack) exceeds the maximum index allowed considering the number of elements to consider to the left (nLeft).")

    endNBack = nBack + nLeft

    // Initialize the minimum index to start the search
    nBackMin = -1

    for i = nBack - nRight to endNBack
        if not na(low[i])
            nBackMin := i
            break
    
    // Check if first minimum index could be found
    if nBackMin == -1
        log.error("No valid first minimum index could be found")

    // Loop to find the index of the minimum value within the specified range
    // if not already done
    if nBackMin != -1 and nBackMin != endNBack
        for i = nBackMin + 1 to endNBack
            // Compare the value at the current index (i) with the value at nBackMin
            if low[i] < low[nBackMin]
                // If the value at src[i] is smaller, update nBackMin to the current index (i)
                nBackMin := i
    
    // Return the index of the minimum value found within the specified range
    nBackMin

getHighMaxNBack(nBack, nLeft, nRight) =>
    // Boundary checks to ensure valid input parameters
    if nBack < nRight
        runtime.error("The test index (nBack) must be greater than or equal to the number of elements to consider to the right (nRight).")
    
    if nBack > bar_index - nLeft
        runtime.error("The test index (nBack) exceeds the maximum index allowed considering the number of elements to consider to the left (nLeft).")

    endNBack = nBack + nLeft

    // Initialize the minimum index to start the search
    nBackMax = -1

    for i = nBack - nRight to endNBack
        if not na(high[i])
            nBackMax := i
            break
    
    // Check if first minimum index could be found
    if nBackMax == -1
        log.error("No valid first minimum index could be found")

    // Loop to find the index of the maximum value within the specified range
    // if not already done
    if nBackMax != -1 and nBackMax != endNBack
        for i = nBackMax + 1 to endNBack
            // Compare the value at the current index (i) with the value at nBackMax
            if high[i] > high[nBackMax]
                // If the value at src[i] is greater, update nBackMax to the current index (i)
                nBackMax := i
    
    // Return the index of the maximum value found within the specified range
    nBackMax

isLowPivotLow(nBack, nLeft, nRight) =>
    bar_index >= nLeft + nRight ? getLowMinNBack(nBack, nLeft, nRight) == nBack : false

getGhostLowPivotLowNBack(nLeft, nRight) =>
    result = -1
    if barstate.islast and nRight != 0
        lowMinNBack = getLowMinNBack(nRight, nLeft, nRight)
        if lowMinNBack < nRight
            result := lowMinNBack
    result

isHighPivotHigh(nBack, nLeft, nRight) =>
    bar_index >= nLeft + nRight ? getHighMaxNBack(nBack, nLeft, nRight) == nBack : false

getGhostHighPivotHighNBack(nLeft, nRight) =>
    result = -1
    if barstate.islast and nRight != 0
        highMaxNBack = getHighMaxNBack(nRight, nLeft, nRight)
        if highMaxNBack < nRight
            result := highMaxNBack
    result

getLowPivotsLow(nBackStart, nBackEnd, nLeft, nRight, maxCount) =>
    // Boundary checks to ensure valid input parameters
    if nBackEnd < nBackStart
        runtime.error("The end index (nBackEnd) cannot be greater than the start index (nBackStart)")

    if nBackStart < nRight
        runtime.error("The starting index (nBackStart) must be greater than or equal to the number of elements to consider to the right (nRight).")

    if nBackEnd > bar_index - nLeft
        runtime.error("The end index (nBackEnd) exceeds the maximum index allowed considering the number of elements to consider to the left (nLeft).")

    // Loop through and collect pivots low
    result = array.new<int>(0)

    for i = nBackStart to nBackEnd
        if isLowPivotLow(i, nLeft, nRight)
            array.push(result, i)

            // stop max pivot cound reached
            if maxCount > 0 and array.size(result) == maxCount
                break
    
    result

getHighPivotsHigh(nBackStart, nBackEnd, nLeft, nRight, maxCount) =>
    // Boundary checks to ensure valid input parameters
    if nBackEnd < nBackStart
        runtime.error("The end index (nBackEnd) cannot be greater than the start index (nBackStart)")

    if nBackStart < nRight
        runtime.error("The starting index (nBackStart) must be greater than or equal to the number of elements to consider to the right (nRight).")

    if nBackEnd > bar_index - nLeft
        runtime.error("The end index (nBackEnd) exceeds the maximum index allowed considering the number of elements to consider to the left (nLeft).")

    // Loop through and collect pivots low
    result = array.new<int>(0)

    for i = nBackStart to nBackEnd
        if isHighPivotHigh(i, nLeft, nRight)
            array.push(result, i)

            // stop max pivot cound reached
            if maxCount > 0 and array.size(result) == maxCount
                break
    
    result

isBullishDivergence(nBack1, nBack2) =>
    nBackPrev = math.max(nBack1, nBack2)
    nBackNext = math.min(nBack1, nBack2)
    low[nBackNext] < low[nBackPrev] and array.get(indicator, nBackNext) > array.get(indicator, nBackPrev)

isHiddenBullishDivergence(nBack1, nBack2) =>
    nBackPrev = math.max(nBack1, nBack2)
    nBackNext = math.min(nBack1, nBack2)
    low[nBackNext] > low[nBackPrev] and array.get(indicator, nBackNext) < array.get(indicator, nBackPrev)

isBearishDivergence(nBack1, nBack2) =>
    nBackPrev = math.max(nBack1, nBack2)
    nBackNext = math.min(nBack1, nBack2)
    high[nBackNext] > high[nBackPrev] and array.get(indicator, nBackNext) < array.get(indicator, nBackPrev)

isHiddenBearishDivergence(nBack1, nBack2) =>
    nBackPrev = math.max(nBack1, nBack2)
    nBackNext = math.min(nBack1, nBack2)
    high[nBackNext] < high[nBackPrev] and array.get(indicator, nBackNext) > array.get(indicator, nBackPrev)

getDivergences(nLeft, nRight) =>
    if nMaxBack > 0 and nMaxBack <= nRight
        runtime.error("nMaxBack must be greater than nRight")
    
    isPivotLow          = false
    ghostPivotLowNBack  = -1
    isPivotHigh         = false
    ghostPivotHighNBack = -1

    // get current pivots
    if bar_index > nLeft + nRight
        isPivotLow          := isLowPivotLow(nRight, nLeft, nRight)
        ghostPivotLowNBack  := getGhostLowPivotLowNBack(nLeft, nRight)
        isPivotHigh         := isHighPivotHigh(nRight, nLeft, nRight)
        ghostPivotHighNBack := getGhostHighPivotHighNBack(nLeft, nRight)

    // find pivots to test against current pivots
    prevPivotsLow  = array.new<int>()
    prevPivotsHigh = array.new<int>()

    if isPivotLow or ghostPivotLowNBack != -1
        prevPivotsLow := getLowPivotsLow(nBackStart=nRight + 1,
                                         nBackEnd=nMaxBack > 0 ? math.min(bar_index - nLeft, nMaxBack) : bar_index - nLeft,
                                         nLeft=nLeft,
                                         nRight=nRight,
                                         maxCount=maxInBetween >= 0 ? maxInBetween + 1 : -1)

    if isPivotHigh or ghostPivotHighNBack != -1
        prevPivotsHigh := getHighPivotsHigh( nBackStart=nRight + 1,
                                             nBackEnd=nMaxBack > 0 ? math.min(bar_index - nLeft, nMaxBack) : bar_index - nLeft,
                                             nLeft=nLeft,
                                             nRight=nRight,
                                             maxCount=maxInBetween >= 0 ? maxInBetween + 1 : -1)

    // find bullish divergence using confirmed pivot
    bulDivNBack       = -1
    hiddenBulDivNBack = -1

    if isPivotLow and array.size(prevPivotsLow) > 0
        for i = 0 to array.size(prevPivotsLow) - 1
            nBack = array.get(prevPivotsLow, i)

            if bulDivNBack == -1 ? isBullishDivergence(nBack, nRight) : false
                bulDivNBack := nBack

                if hiddenBulDivNBack != -1
                    break

            if hiddenBulDivNBack == -1 ? isHiddenBullishDivergence(nBack, nRight) : false
                hiddenBulDivNBack := nBack

                if bulDivNBack != -1
                    break
    
    // find bullish divergence using unconfirmed pivot
    ghostBulDivNBack       = -1
    ghostHiddenBulDivNBack = -1

    if ghostPivotLowNBack != -1 and array.size(prevPivotsLow) > 0
        for i = 0 to array.size(prevPivotsLow) - 1
            nBack = array.get(prevPivotsLow, i)
            
            if ghostBulDivNBack == -1 ? isBullishDivergence(nBack, ghostPivotLowNBack) : false
                ghostBulDivNBack := nBack

                if ghostHiddenBulDivNBack != -1
                    break

            if ghostHiddenBulDivNBack == -1 ? isHiddenBullishDivergence(nBack, ghostPivotLowNBack) : false
                ghostHiddenBulDivNBack := nBack

                if ghostBulDivNBack != -1
                    break

    // find bearish divergence using confirmed pivot
    bearDivNBack       = -1
    hiddenBearDivNBack = -1

    if isPivotHigh and array.size(prevPivotsHigh) > 0
        for i = 0 to array.size(prevPivotsHigh) - 1
            nBack = array.get(prevPivotsHigh, i)

            if bearDivNBack == -1 ? isBearishDivergence(nBack, nRight) : false
                bearDivNBack := nBack

                if hiddenBearDivNBack != -1
                    break

            if hiddenBearDivNBack == -1 ? isHiddenBearishDivergence(nBack, nRight) : false
                hiddenBearDivNBack := nBack

                if bearDivNBack != -1
                    break    

    // find (hidden)bearish divergence using unconfirmed pivot
    ghostBearDivNBack       = -1
    ghostHiddenBearDivNBack = -1

    if ghostPivotHighNBack != -1 and array.size(prevPivotsHigh) > 0
        for i = 0 to array.size(prevPivotsHigh) - 1
            nBack = array.get(prevPivotsHigh, i)
            
            if ghostBearDivNBack == -1 ? isBearishDivergence(nBack, ghostPivotHighNBack) : false
                ghostBearDivNBack := nBack

                if ghostHiddenBearDivNBack != -1
                    break

            if hiddenBearDivNBack == -1 ? isHiddenBearishDivergence(nBack, ghostPivotHighNBack) : false
                ghostHiddenBearDivNBack := nBack

                if ghostBearDivNBack != -1
                    break
    
    [bulDivNBack,
     hiddenBulDivNBack,
     
     ghostBulDivNBack,
     ghostHiddenBulDivNBack,
     ghostPivotLowNBack,
     
     bearDivNBack,
     hiddenBearDivNBack,
     
     ghostBearDivNBack,
     ghostHiddenBearDivNBack,
     ghostPivotHighNBack]

plotBulDiv(nBack1, nBack2, isGhost) =>
    if nBack1 != -1 and nBack2 != -1 and ((not isGhost and isShowBullDiv) or (isGhost and isShowUnconfBullDiv))
        if isShowDivLine
            line.new(x1=bar_index - nBack1,
                     y1=low[nBack1],
                     x2=bar_index - nBack2,
                     y2=low[nBack2],
                     color=bullDivLineColor,
                     style=line.style_dotted)

        if isShowDivLabel
            label.new(x=bar_index - nBack2,
                      y=low[nBack2] - array.get(atr, nBack2) * 0.3,
                      text=isGhost ? "👻" : "🦄",
                      style=label.style_label_up,
                      color=color.green,
                      size=size.tiny,
                      tooltip=(isGhost ? "[ Unconfirmed ]" : "[ Confirmed ]") + " Bullish divergence is a key concept in technical analysis, indicating a potential reversal in a downtrend. It occurs when the price of an asset forms lower lows while the corresponding indicator (such as the Relative Strength Index or MACD) forms higher lows. This suggests a weakening downtrend momentum and the possibility of an upcoming price increase. Traders often use bullish divergence to anticipate trend reversals and consider it a signal to potentially enter long positions or to be cautious about shorting.")

plotHiddenBulDiv(nBack1, nBack2, isGhost) =>
    if nBack1 != -1 and nBack2 != -1 and ((not isGhost and isShowHiddenBullDiv) or (isGhost and isShowUnconfHiddenBullDiv))
        if isShowDivLine
            line.new(x1=bar_index - nBack1,
                     y1=low[nBack1],
                     x2=bar_index - nBack2,
                     y2=low[nBack2],
                     color=hiddenBullDivLineColor,
                     style=line.style_dotted)
        
        if isShowDivLabel
            label.new(x=bar_index - nBack2,
                      y=low[nBack2] - array.get(atr, nBack2) * 0.3,
                      text=isGhost ? "👻" : "🦄",
                      style=label.style_label_up,
                      color=color.green,
                      size=size.tiny,
                      tooltip=(isGhost ? "[ Unconfirmed ]" : "[ Confirmed ]") + " Hidden bullish divergence is a nuanced concept in technical analysis, signaling a continuation of an uptrend. It occurs when the price of an asset forms higher lows while the corresponding indicator (such as the Relative Strength Index or MACD) forms lower lows. This indicates that despite the price retracement, the underlying bullish momentum remains intact. Traders often interpret hidden bullish divergence as a signal to stay in long positions or consider entering new ones, anticipating the uptrend to persist.")

plotBearDiv(nBack1, nBack2, isGhost) =>
    if nBack1 != -1 and nBack2 != -1 and ((not isGhost and isShowBearDiv) or (isGhost and isShowUnconfBearDiv))
        if isShowDivLine
            line.new(x1=bar_index - nBack1,
                     y1=high[nBack1],
                     x2=bar_index - nBack2,
                     y2=high[nBack2],
                     color=bearDivLineColor,
                     style=line.style_dotted)

        if isShowDivLabel
            label.new(x=bar_index - nBack2,
                      y=high[nBack2] + array.get(atr, nBack2) * 0.3,
                      text=isGhost ? "👻" : "🐻",
                      style=label.style_label_down,
                      color=color.red,
                      size=size.tiny,
                      tooltip=(isGhost ? "[ Unconfirmed ]" : "[ Confirmed ]") + " Bearish divergence is a crucial concept in technical analysis, signaling a potential reversal in an uptrend. It occurs when the price of an asset makes higher highs while the corresponding indicator (such as the Relative Strength Index or MACD) forms lower highs. This suggests weakening momentum and potential upcoming price decline. Traders often use bearish divergence to anticipate trend reversals and consider it a warning sign to exercise caution or consider shorting positions.")

plotHiddenBearDiv(nBack1, nBack2, isGhost) =>
    if nBack1 != -1 and nBack2 != -1 and ((not isGhost and isShowHiddenBearDiv) or (isGhost and isShowUnconfHiddenBearDiv))
        if isShowDivLine
            line.new(x1=bar_index - nBack1,
                     y1=high[nBack1],
                     x2=bar_index - nBack2,
                     y2=high[nBack2],
                     color=hiddenBearDivLineColor,
                     style=line.style_dotted)

        if isShowDivLabel
            label.new(x=bar_index - nBack2,
                      y=high[nBack2] + array.get(atr, nBack2) * 0.3,
                      text=isGhost ? "👻" : "🐻",
                      style=label.style_label_down,
                      color=color.red,
                      size=size.tiny,
                      tooltip=(isGhost ? "[ Unconfirmed ]" : "[ Confirmed ]") + " Hidden bearish divergence is an insightful concept in technical analysis, suggesting a continuation of a downtrend. It occurs when the price of an asset forms lower highs while the corresponding indicator (such as the Relative Strength Index or MACD) forms higher highs. This divergence signals that despite the temporary price rally, the underlying bearish momentum remains strong. Traders often interpret hidden bearish divergence as a warning sign to exercise caution in long positions or consider entering short positions, anticipating the downtrend to persist.")

for i = 0 to int((nLeftEnd - nLeftStart) / nLeftStep)
    nLeft  = nLeftStart + nLeftStep * i
    nRight = nRightStart + nRightStep * i
    
    [bulDivNBack,
     hiddenBulDivNBack,
     
     ghostBulDivNBack,
     ghostHiddenBulDivNBack,
     ghostPivotLowNBack,
     
     bearDivNBack,
     hiddenBearDivNBack,
     
     ghostBearDivNBack,
     ghostHiddenBearDivNBack,
     ghostPivotHighNBack] = getDivergences(nLeft, nRight)

    plotBulDiv(bulDivNBack, nRight, false)
    plotHiddenBulDiv(hiddenBulDivNBack, nRight, false)

    plotBulDiv(ghostBulDivNBack, ghostPivotLowNBack, true)
    plotHiddenBulDiv(ghostHiddenBulDivNBack, ghostPivotLowNBack, true)

    plotBearDiv(bearDivNBack, nRight, false)
    plotHiddenBearDiv(hiddenBearDivNBack, nRight, false)

    plotBearDiv(ghostBearDivNBack, ghostPivotHighNBack, true)
    plotHiddenBearDiv(ghostHiddenBearDivNBack, ghostPivotHighNBack, true)

