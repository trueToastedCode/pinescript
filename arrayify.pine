// This Pine Scriptâ„¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© iFlyTheMoon

//@version=5

library("Arrayify", overlay=true)

// types = [
//     'int',
//     'float',
//     'bool',
//     'color',
//     'string',
//     'label',
//     'line',
//     'linefill',
//     'box',
//     'table'
// ]

// def get_method(type):
//     return f'''
// export arrayify(series {types} src, int n_back) =>
//     result = array.new<{types}>(n_back + 1)
//     for i = 0 to n_back
//         array.set(result, i, src[i])
//     result
// '''.strip()

// print('\n\n'.join(map(get_method, types)))

export arrayify(series int src, int n_back) =>
    result = array.new<int>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series float src, int n_back) =>
    result = array.new<float>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series bool src, int n_back) =>
    result = array.new<bool>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series color src, int n_back) =>
    result = array.new<color>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series string src, int n_back) =>
    result = array.new<string>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series label src, int n_back) =>
    result = array.new<label>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series line src, int n_back) =>
    result = array.new<line>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series linefill src, int n_back) =>
    result = array.new<linefill>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series box src, int n_back) =>
    result = array.new<box>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

export arrayify(series table src, int n_back) =>
    result = array.new<table>(n_back + 1)
    for i = 0 to n_back
        array.set(result, i, src[i])
    result

